ex08 TODO
=====================

In this exercise you will practice various uses of textures and bitmaps
such as sprites, text, point sprites and the integration of a GUI (HUD).

Font bitmaps are generated by glut and are accessable using drawString() to draw
a line of bitmap characters, and getStringSize() that calculates the dimensions 
of the line's bounding box in screen pixels.

Textures are already loaded in init() and transfered into texture objects. The
textures are:

	g_treeTex - an RGBA 2D tree to be used as a sprite
	g_markerTex - an RGBA 2D '!' to be used as a point sprite
	g_hudTex - an RGB 2D rectangular bar to placed at the bottom of the screen

1. Draw HUD (head-up display)
The drawHUD() function should print layout that covers the entire screen. 
It should display a text (any text) at the four corners of the screen.
It should display an image (g_hudTex) at the bottom of the screen. The dimensions
of the bar are given by TEXTURE_BAR_WIDTH/HEIGHT in screen pixels.
Therefore to display the text and bar properly you must define their location
in pixels. 
To do this you should define an orthographic projection that trivially 
transforms view space to window space, which would allow you to define items
in "screen space". Use g_width and g_height to obtain the dimensions of the 
screen at that moment (may change on resize). 

2. Draw Polygonal Sprites
The drawTree() function should draw a quad with the tree texture (g_treeTex). 
It should be specified in object space. You should use any sprite technique to
make the quad face the Center of Projection at all times. In addition take care
of the "transperant" pixels of the texture. Blending isn't good enough because it 
ruins the depth buffer. Note that alpha values are either one or zero, and 
never in between.

3. Draw Point Sprites
The drawPointSprites() should draw a bunch of points of size TEXTURE_MARKER_SIZE
and use the Point Sprite extension (if supported) to strap a texture on it. You 
should obtain the locations from g_randomPos which is initialized to have random
locations for POINT_SPRITES_MAX points.

4. Draw Text Captions
Use drawString() to draw a caption on the objects drawn in drawObjects(). This will
show you how the raster position is effected by the modelview matrix. Try to give a 
different color to the text, and remember that glRaster() samples the current glColor().
